@model IMS.Models.Product

@{
    ViewBag.Title = "SetPrice";
}

<h4 class="text-uppercase">Set Price For each Product</h4>

@using (Html.BeginForm("SetPrice", "Product", FormMethod.Post, new {area="", enctype = "multipart/form-data", @class = "pb-4 pt-2" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="row">
            <div class="col-10">
                <div class="row">
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control",id="Name", @placeholder = "Product Name..." } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger",id= "nameValidation" })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.BuyingPrice, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.BuyingPrice, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @placeholder = "Write Your Selling Price...", id = "price" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.SKU, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.Department.Name, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.Department.Name, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                    <br />
                    <div class="form-group col-6 mb-3">
                        @Html.LabelFor(model => model.ProductType.Name, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.EditorFor(model => model.ProductType.Name, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2 mb-1" })
                        <div class="col-md-12">
                            <input type="file" name="ImageFile" id="ImageFile" class="form-control" />
                            @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="form-group mb-3 mt-2">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                        @Html.TextAreaFor(model => model.Description, new { placeholder = "Write Product Description...", @class = "form-control", rows = "4", id = "tiny" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger",id="desValidation" })
                    </div>
                    <br />
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save Changes" id="btnSubmit" class="btn btn-outline-success" />
                        @Html.ActionLink("Back to List", "ManagePrice", null, new { @class = "btn btn-outline-info" })
                    </div>
                </div>
            </div>
            <div class="col-2">  <img src="@Url.Content("~/Images/" + Model.Image)" alt="Product Image" class="img-fluid" style="box-shadow: 0 5px 10px -5px rgba(0, 0, 0, 0.2) "> </div>
        </div>
    </div>
}

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Clear the Price field when the page loads
        window.addEventListener('load', function () {
            var priceField = document.getElementById('price');
            if (priceField) {
                priceField.value = '';
            }
        });
        tinymce.init({
            selector: 'textarea#tiny',
            plugins: 'anchor autolink charmap codesample emoticons image link lists searchreplace table visualblocks wordcount mediaembed editimage mergetags tinymcespellchecker autocorrect a11ychecker typography inlinecss',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image table mergetags | align lineheight | tinycomments | numlist bullist indent outdent | emoticons charmap | removeformat',
            menubar: false,
            image_title: true,
            automatic_uploads: true,

            file_picker_types: 'image',

            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        /* call the callback and populate the Title field with the file name */
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },

            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });

        $('#btnSubmit').on('click', function (e) {
            var name = $('#Name').val();
            if (name == "") {
                $('#nameValidation').text('Product name is required.');
              
            }
            if (name != "" && (name.match(/[a-zA-Z]/g) || []).length < 3) {
                $('#nameValidation').text('Product name must contain at least three letters.');
                e.preventDefault();
            }

            var des = tinymce.activeEditor.getContent();
            if (des == "") {
                $('#desValidation').text('Description is required.');
                e.preventDefault();
            } else {
                $('#desValidation').text('');
            }
        });
    </script>
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>