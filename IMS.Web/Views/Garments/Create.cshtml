@model IMS.Models.GarmentsProduct

@{
    ViewBag.Title = "Create";
}

<h2 class="text-uppercase">Add Garments Product</h2>
<br />
@using (Html.BeginForm("Create", "Garments", FormMethod.Post, new { enctype = "multipart/form-data", @class = "pb-4 pt-2"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" });

    <div class="form-group">
        @Html.TextBoxFor(model => model.Name, new { placeholder = "Product Name", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.TextBoxFor(model => model.Price, new { placeholder = "Price", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.TextBoxFor(model => model.SKU, new { placeholder = "SKU", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.DropDownListFor(model => model.DepartmentId, (SelectList)ViewBag.Departments, "Select Department", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">

        @Html.DropDownListFor(model => model.ProductTypeId, (SelectList)ViewBag.ProductTypes, "Select Product Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ProductTypeId, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.TextAreaFor(model => model.Description, new { placeholder = "Write Product Description...", @class = "form-control", rows = "4", id = "tiny" })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
    <br />
    @*<div class="form-group">
            <input type="file" name="imageFile" id="imageFile" class="form-control" />
        </div>*@

    <br />
    <button type="submit" class="btn btn-outline-primary">Add Product</button>
    @Html.ActionLink("Back to List", "ProductList", null, new { @class = "btn btn-outline-info" })
}

@section Scripts{
    <script>
        tinymce.init({
            selector: 'textarea#tiny',
            plugins: 'ai mentions anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed permanentpen footnotes advtemplate advtable advcode editimage tableofcontents mergetags powerpaste tinymcespellchecker autocorrect a11ychecker typography inlinecss',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | align lineheight | tinycomments | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            image_title: true,
            automatic_uploads: true,

            file_picker_types: 'image',

            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                  var file = this.files[0];

                  var reader = new FileReader();
                  reader.onload = function () {
                    var id = 'blobid' + (new Date()).getTime();
                    var blobCache =  tinymce.activeEditor.editorUpload.blobCache;
                    var base64 = reader.result.split(',')[1];
                    var blobInfo = blobCache.create(id, file, base64);
                    blobCache.add(blobInfo);

                    /* call the callback and populate the Title field with the file name */
                    cb(blobInfo.blobUri(), { title: file.name });
                  };
                  reader.readAsDataURL(file);
                };

                input.click();
            },
            
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });
    </script>
}
