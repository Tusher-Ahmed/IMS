@model IMS.Models.GarmentsProduct

@{
    ViewBag.Title = "Create";
}


<h2 class="text-uppercase">Add Product</h2>
<br />
@using (Html.BeginForm("Create", "Garments", FormMethod.Post, new { enctype = "multipart/form-data", @class = "pb-4 pt-2" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" });

<div class="form-group">
    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-12" })
    @Html.TextBoxFor(model => model.Name, new { placeholder = "Product Name", @class = "form-control" })
    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
</div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-12" })
        @Html.TextBoxFor(model => model.Price, new { placeholder = "Price", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        <label class="pb-2">Size Options:</label>
        <div class="form-check d-block p-0">            
            @foreach (var skuOption in new List<string> { "S", "M", "L", "XL", "XXL" })
            {
                <div class="form-check p-0" style="display:inline-block; margin-right:10px;">
                    @Html.CheckBox("SelectedSKUs", false, new { value = skuOption, style = "width: 15px; height: 15px; " })
                    @Html.Label(skuOption, new { @class = "form-check-label" })
                </div>
            }
        </div>

        @Html.HiddenFor(model => model.SKU)
        @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "control-label col-md-12" })
        @Html.DropDownListFor(model => model.DepartmentId, (SelectList)ViewBag.Departments, "Select Department", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.ProductTypeId, htmlAttributes: new { @class = "control-label col-md-12" })
        @Html.DropDownListFor(model => model.ProductTypeId, (SelectList)ViewBag.ProductTypes, "Select Product Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ProductTypeId, "", new { @class = "text-danger" })
    </div>
    <br />
    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-12" })
        @Html.TextAreaFor(model => model.Description, new { placeholder = "Write Product Description...", @class = "form-control", rows = "4", id = "tiny" })
        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
    </div>
    <br />
    <button type="submit" id="btnAdd" class="btn btn-outline-primary">Add Product</button>
    @Html.ActionLink("Back to List", "ProductList", null, new { @class = "btn btn-outline-info" })
}

@section Scripts{
    <script>
        tinymce.init({
            selector: 'textarea#tiny',
            plugins: 'ai mentions anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed permanentpen footnotes advtemplate advtable advcode editimage tableofcontents mergetags powerpaste tinymcespellchecker autocorrect a11ychecker typography inlinecss',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | align lineheight | tinycomments | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            menubar: false,
            image_title: true,
            automatic_uploads: true,

            file_picker_types: 'image',

            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        /* call the callback and populate the Title field with the file name */
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },

            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });
        $('input[name="SelectedSKUs"]').on('change', function () {
            var selectedSKUs = $('input[name="SelectedSKUs"]:checked').map(function () {
                return this.value;
            }).get().join(',');

            $('#SKU').val(selectedSKUs);
        });

                //$(document).on("click", "#btnAdd", function (e) {
                //    e.preventDefault();
                //    let a = $("#Description").val();
                //    console.log(a);
                //})
    </script>
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>