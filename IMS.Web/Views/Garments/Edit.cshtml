@model IMS.Models.ViewModel.GarmentsEditViewModel

@{
    ViewBag.Title = "Edit";
}


<div class="row">
    <div class="col-6">
        <h4 class="text-uppercase pb-4">Edit Product</h4>
    </div>
    <div class="col-6 text-end pb-4">

        @if (User.IsInRole("Supplier"))
        {
            <a href="@Url.Action("Index", "GarmentsHome", new {area="Garmentss"})" class="btn btn-outline-success"><i class="fa-solid fa-square-caret-left"></i> Back To Dashboard</a>
        }

        
    </div>
</div>

@using (Html.BeginForm("Edit", "Garments", FormMethod.Post, new { enctype = "multipart/form-data", @class = "pb-4 pt-2" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.GarmentsProduct.Id)

        <div class="row">
            <div class="col-10">
                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.Name, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.EditorFor(model => model.GarmentsProduct.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GarmentsProduct.Name, "", new { @class = "text-danger" })
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.Price, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.EditorFor(model => model.GarmentsProduct.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GarmentsProduct.Price, "", new { @class = "text-danger" })
                </div>
                <br />
                <div class="form-group">
                    <label class="pb-2">Size Options:</label>
                    <div class="form-check d-block p-0">
                        @foreach (var skuOption in new List<string> { "S", "M", "L", "XL", "XXL" })
                        {
                            <div class="form-check p-0" style="display:inline-block; margin-right:10px;">
                                @{
                                    bool isChecked = Model.SelectedSKUs != null && Model.SelectedSKUs.Contains(skuOption);
                                }
                                <input type="checkbox" id="@($"SelectedSKUs_{skuOption}")" name="SelectedSKUs" value="@skuOption" @(isChecked ? "checked" : "") style="width: 15px; height: 15px; " />
                                <label for="@($"SelectedSKUs_{skuOption}")" class="form-check-label">@skuOption</label>
                            </div>
                        }
                    </div>
                    @Html.HiddenFor(model => model.GarmentsProduct.SKU)
                    @Html.ValidationMessageFor(model => model.SelectedSKUs, "", new { @class = "text-danger" })
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.DepartmentId, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.DropDownListFor(model => model.GarmentsProduct.DepartmentId, (SelectList)ViewBag.Departments, "Select Department", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GarmentsProduct.DepartmentId, "", new { @class = "text-danger" })
                </div>
                <br />

                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.ProductTypeId, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.DropDownListFor(model => model.GarmentsProduct.ProductTypeId, (SelectList)ViewBag.ProductTypes, "Select Product Type", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GarmentsProduct.ProductTypeId, "", new { @class = "text-danger" })
                </div>
                <br/>
                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        <input type="file" name="ImageFile" id="ImageFile" class="form-control" />
                        @Html.ValidationMessageFor(model => model.GarmentsProduct.Image, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.GarmentsProduct.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                    @Html.TextAreaFor(model => model.GarmentsProduct.Description, new { placeholder = "Write Product Description...", @class = "form-control", rows = "4", id = "tiny" })
                    @Html.ValidationMessageFor(model => model.GarmentsProduct.Description, "", new { @class = "text-danger" })
                </div>
                <br />
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save Changes" class="btn btn-outline-success" />
                        @Html.ActionLink("Back to List", "ProductList", null, new { @class = "btn btn-outline-info" })
                    </div>
                </div>
            </div>
            <div class="col-2">  <img src="@Url.Content("~/Images/" + Model.GarmentsProduct.Image)" alt="Product Image" class="img-fluid" style="box-shadow: 0 5px 10px -5px rgba(0, 0, 0, 0.2) "> </div>
        </div>

    </div>
}

@section Scripts{
    <script>
        tinymce.init({
            selector: 'textarea#tiny',
            plugins: 'anchor autolink charmap codesample emoticons image link lists searchreplace table visualblocks wordcount mediaembed editimage mergetags tinymcespellchecker autocorrect a11ychecker typography inlinecss',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image table mergetags | align lineheight | tinycomments | numlist bullist indent outdent | emoticons charmap | removeformat',
            menubar: false,
            image_title: true,
            automatic_uploads: true,

            file_picker_types: 'image',

            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        /* call the callback and populate the Title field with the file name */
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },

            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });

    </script>
}
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>